#!/usr/bin/env perl
use FindBin qw($Bin);
use lib "$Bin/../lib";

use Getopt::Long;

use AutoHarp::Generator;
use AutoHarp::Transcription;
use AutoHarp::Instrument;
use AutoHarp::MusicBox::Hook;
use AutoHarp::Constants;
use AutoHarp::Model::Genre;
use AutoHarp::Fuzzy;
use AutoHarp::Config;

use strict;

my $genreName;
my $genre;
my $regenerate;
my $useQuickFile;
my $silent;
my $listGenresAndExit;
my $tempo;
my $meter;
my $key;
my $hook;
my $bars;

my $DEFAULT_BARS = 8;

GetOptions ("--genre:s" => \$genreName,
	    "--quick"   => \$useQuickFile,
	    "--silent"       => \$silent,
	    "--regenerate:s" => \$regenerate,
	    "--listGenres" => \$listGenresAndExit,
	    "--tempo:s" => \$tempo,
	    "--meter:s" => \$meter,
	    "--hook:s" => \$hook,
	    "--key:s" => \$key,
	    "--bars:s" => \$bars
	   );


my $verbose = !$silent;
$ENV{AUTOHARP_QUIET} = $silent;

if ($genreName) {
  $genre = AutoHarp::Model::Genre->loadByName($genreName);
  if ($genre->isEmpty()) {
    print "Genre $genreName is unknown.\n";
    $listGenresAndExit = 1;
  }
} 

if ($listGenresAndExit) {
  print "Valid Genres:\n";
  print join("\n",sort map {$_->name} @{AutoHarp::Model::Genre->all()});
  print "\n";
  exit(0);
}

my $transcription;
if ($regenerate) {
  my $file = (-f $regenerate) ? $regenerate :
    ($useQuickFile) ? AutoHarp::Config::QuickFile($regenerate) :
    AutoHarp::Config::DataFile($regenerate);

  $transcription = AutoHarp::Transcription->regenerate($file, $genre);
} else {
  if (!$genre) {
    $genre     = pickOne(AutoHarp::Model::Genre->all());
    $genreName = $genre->name();
  }
  
  $transcription = AutoHarp::Transcription->new();
  my $guide = $transcription->constructGuideForGenre($genre);

  if ($bars) {
    $guide->bars($bars);
  }
  if ($key) {
    $guide->key($key);
  }
  if ($tempo) {
    $guide->tempo($tempo);
  }
  if ($meter) {
    $guide->meter($meter);
  }
  if ($hook) {
    $transcription->hook(AutoHarp::MusicBox::Hook->fromString($hook,$guide))
  }
  
  $transcription->name("$genreName-" . time());
  $transcription->instruments(AutoHarp::Instrument->band());
  $transcription->createMusic($guide);
  
  print "Composing...\n" if ($verbose);
  $transcription->compose();
  print "Conducting...\n" if ($verbose);
  $transcription->conduct();
}

if ($verbose) {
  print "Done.\n";
  print "Song Settings: ";
  my $clock;
  my $scale;
  if ($transcription->verse) {
    $clock   = $transcription->verse->guide->clock;
    $scale   = $transcription->verse->guide->scale;
    $genre ||= $transcription->verse->genre();
  }
  print AutoHarp::Notation::CreateHeader($ATTR_CLOCK => $clock,
					 $ATTR_GENRE => $genre,
					 $ATTR_SCALE => $scale
					);
  print "\n";
  printf "MIDI file is %s\n",$transcription->MIDIOut();
  printf "JSON file is %s\n",$transcription->JSONOut();
  printf "Quickfile is %s\n",$transcription->QuickOut();
}


print "Writing transcription...\n" if ($verbose);
#$transcription->write();

AutoHarp::Config::Play($transcription->song);

print "Rename this session,\n";
print "'x' to annhiliate it entirely,\n";
printf "enter to accept '%s' ==> ",$transcription->name(); 
chomp(my $sName = <STDIN>);
if (lc($sName) eq 'x') {
  $transcription->nuke();
  printf "%s has been nuked. Its art has been deemed unworthy.\n",$transcription->name();
} elsif ($sName) {
  $transcription->name($sName);
  $transcription->like();
  if ($verbose) {
    printf "Session MIDI moved to %s\n",$transcription->MIDIOut();
    printf "Session JSON moved to %s\n",$transcription->JSONOut();
    printf "Session Quickfile moved to %s\n",$transcription->QuickOut();
  }
}

exit(0);

